[defaults]
# only report issues with a severity >= to this value (style, low, medium, high, critical)
severity = "style"

# analysers to run.
# Available are: ["clang-tidy", "iwyu"]
# analyzers = ["clang-tidy"]

# database file to use. By default code_checker.sqlite3 is used.
# database = "code_checker.sqlite3"

[compiler]
# extra flags to pass on to the compiler.
# the following is recommended based on CppCon2018: Jason Turner Applied Best Practise 32m47s
extra_flags = [ "-Wall",
    "-Wextra", # resonable and standard
    "-Wshadow", # warn the user if a variable declaration shadows one from a parent context
    "-Wnon-virtual-dtor", # warn the user if a class with virtual functions has a non-virtual destructor
    "-Wold-style-cast", # warn for c-style casts
    "-Wcast-align", # warn for potential performance problem casts
#    "-Wunused", # warn on anything being unused
    "-Woverloaded-virtual", # warn if you overload (not override) a virtual func
    "-Wpedantic", # warn if non-standard C++ is used
    "-Wconversion", # warn on type conversions that may lose data
    "-Wsign-conversion", # warn on sign conversion
    "-Wnull-dereference", # warn if a null dereference is detected
    "-Wdouble-promotion", # Warn if float is implicit promoted to double
    "-Wformat=2", # warn on security issues around functions that format output (ie printf)
    "-Wduplicated-cond", # warn if if /else chain has duplicated conditions
    "-Wduplicated-branches", # warn if if / else branches have duplicated code
    "-Wlogical-op", # warn about logical operations being used where bitwise were probably wanted
    "-Wuseless-cast", # warn if you perform a cast to the same type
    "-Wdocumentation" # warn about mismatch between the signature and doxygen comment
 ]

# use this compilers system includes instead of the one used in the compile_commands.json
# use_compiler_system_includes = "/path/to/c++"

[compile_commands]
# command to execute to generate compile_commands.json
# generate_cmd = ""

# if set then generate_cmd is only executed when a dependency change.
# generate_cmd_deps = ["foo/bar/Makefile", "foo/Makefile"]

# search for compile_commands.json in this paths
search_paths = ["./compile_commands.json"]
# files matching any of the regex will not be analyzed
# exclude = [ ".*/foo/.*", ".*/bar/wun.cpp" ]
# flags to remove when analyzing a file in the DB
# filter = ["-c",
# "-o",
# "-m",
# "-nodevicelib",
# "-Waddr-space-convert",
# "-non-static",
# "-Bstatic",
# "-Bdynamic",
# "-Xbind-lazy",
# "-Xbind-now",
# "-f",
# "-static",
# "-shared",
# "-rdynamic",
# "-s",
# "-l",
# "-L",
# "-z",
# "-u",
# "-T",
# "-Xlinker",
# "-l",
# "-MT",
# "-MF",
# "-MD",
# "-MQ",
# "-MMD",
# "-MP",
# "-MG",
# "-E",
# "-cc1",
# "-S",
# "-M",
# "-MM",
# "-###"]

# compiler arguments to skip from the beginning. Needed when the first argument
# is NOT a compiler but rather a wrapper
# skip_compiler_args = 0

# only analyze a file once.
dedup = true

[clang_tidy]
# clang-tidy binary to use
# binary = "clang-tidy"

# arguments to -header-filter
header_filter = ".*"

# system configuration to use if .clang-tidy do not exists in work directory.
# system_config = "{code_checker}/../etc/code_checker/clang_tidy.conf"

# extend the checks configuration
# check_extensions = []

[iwyu]
# iwyu (include what you use) binary
# binary = "iwyu"

# extra flags to pass on to the iwyu command. For example: ["-Xiwyu", "--verbose=3"]
# flags = []

# gives iwyu one or more mapping file
# mapping_files = []

# the global mapping files as provided by the tool installation
# default_mapping_files = []
