[defaults]
# only report issues with a severity >= to this value (style, low, medium, high, critical)
severity = "style"
# analysers to run. Available are: ["clang-tidy", "iwyu"]
# analyzers = ["clang-tidy"]

[compiler]
# extra flags to pass on to the compiler
# the following is recommended based on CppCon2018: Jason Turner Applied Best Practise 32m47s
extra_flags = [ "-Wall",
    "-Wextra", # resonable and standard
    "-Wshadow", # warn the user if a variable declaration shadows one from a parent context
    "-Wnon-virtual-dtor", # warn the user if a class with virtual functions has a non-virtual destructor
    "-Wold-style-cast", # warn for c-style casts
    "-Wcast-align", # warn for potential performance problem casts
#    "-Wunused", # warn on anything being unused
    "-Woverloaded-virtual", # warn if you overload (not override) a virtual func
    "-Wpedantic", # warn if non-standard C++ is used
    "-Wconversion", # warn on type conversions that may lose data
    "-Wsign-conversion", # warn on sign conversion
    "-Wnull-dereference", # warn if a null dereference is detected
    "-Wdouble-promotion", # Warn if float is implicit promoted to double
    "-Wformat=2", # warn on security issues around functions that format output (ie printf)
    "-Wduplicated-cond", # warn if if /else chain has duplicated conditions
    "-Wduplicated-branches", # warn if if / else branches have duplicated code
    "-Wlogical-op", # warn about logical operations being used where bitwise were probably wanted
    "-Wuseless-cast", # warn if you perform a cast to the same type
    "-Wdocumentation" # warn about mismatch between the signature and doxygen comment
 ]
# use this compilers system includes instead of the one used in the compile_commands.json
# use_compiler_system_includes = "/path/to/c++"

[compile_commands]
# command to execute to generate compile_commands.json
# generate_cmd = ""
# search for compile_commands.json in this paths
search_paths = ["./compile_commands.json"]
# files matching any of the regex will not be analyzed
# exclude = [ ".*/foo/.*", ".*/bar/wun.cpp" ]
# flags to remove when analyzing a file in the DB
# filter = ["-c",
# "-o",
# "-m",
# "-nodevicelib",
# "-Waddr-space-convert",
# "-non-static",
# "-Bstatic",
# "-Bdynamic",
# "-Xbind-lazy",
# "-Xbind-now",
# "-f",
# "-static",
# "-shared",
# "-rdynamic",
# "-s",
# "-l",
# "-L",
# "-z",
# "-u",
# "-T",
# "-Xlinker",
# "-l",
# "-MT",
# "-MF",
# "-MD",
# "-MQ",
# "-MMD",
# "-MP",
# "-MG",
# "-E",
# "-cc1",
# "-S",
# "-M",
# "-MM",
# "-###"]
# compiler arguments to skip from the beginning. Needed when the first argument is NOT a compiler but rather a wrapper
# skip_compiler_args = 0

# only analyze a file once.
dedup = true

[clang_tidy]
# clang-tidy binary to use
# binary = "clang-tidy"
# arguments to -header-filter
header_filter = ".*"
# extend the checks configuration
# check_extensions = []
# checks to use
checks = ["*",
"-fuchsia-*",
"-llvm-include-order",
"-readability-implicit-bool-conversion",
"-readability-named-parameter",
"-google-readability-todo",
"-cppcoreguidelines-pro-type-member-init",
"-modernize-pass-by-value",
"-modernize-return-braced-init-list",
"-cppcoreguidelines-owning-memory",
"-cppcoreguidelines-pro-type-union-access",
"-cppcoreguidelines-pro-bounds-array-to-pointer-decay",
"-cppcoreguidelines-pro-bounds-constant-array-index",
"-cppcoreguidelines-pro-bounds-pointer-arithmetic",
"-cppcoreguidelines-pro-type-vararg",
"-cppcoreguidelines-pro-type-reinterpret-cast",
"-cppcoreguidelines-pro-type-cstyle-cast",
"-hicpp-no-assembler",
"-hicpp-vararg",
"-hicpp-no-array-decay"]
# options affecting the checks
options = ["{key: cert-dcl59-cpp.HeaderFileExtensions, value: \"h,hh,hpp,hxx\"}",
"{key: cert-err61-cpp.CheckThrowTemporaries, value: \"1\"}",
"{key: cert-oop11-cpp.IncludeStyle, value: llvm}",
"{key: cert-oop11-cpp.UseCERTSemantics, value: \"1\"}",
"{key: cppcoreguidelines-pro-bounds-constant-array-index.GslHeader, value: \"\"}",
"{key: cppcoreguidelines-pro-bounds-constant-array-index.IncludeStyle, value: \"0\"}",
"{key: cppcoreguidelines-pro-type-member-init.IgnoreArrays, value: \"0\"}",
"{key: google-build-namespaces.HeaderFileExtensions, value: \"h,hh,hpp,hxx\"}",
"{key: google-global-names-in-headers.HeaderFileExtensions, value: h}",
"{key: google-readability-braces-around-statements.ShortStatementLines, value: \"1\"}",
"{key: google-readability-function-size.BranchThreshold, value: \"4294967295\"}",
"{key: google-readability-function-size.LineThreshold, value: \"4294967295\"}",
"{key: google-readability-function-size.StatementThreshold, value: \"800\"}",
"{key: google-readability-namespace-comments.ShortNamespaceLines, value: \"10\"}",
"{key: google-readability-namespace-comments.SpacesBeforeComments, value: \"2\"}",
"{key: google-runtime-int.SignedTypePrefix, value: int}",
"{key: google-runtime-int.TypeSuffix, value: \"\"}",
"{key: google-runtime-int.UnsignedTypePrefix, value: uint}",
"{key: llvm-namespace-comment.ShortNamespaceLines, value: \"1\"}",
"{key: llvm-namespace-comment.SpacesBeforeComments, value: \"1\"}",
"{key: misc-assert-side-effect.AssertMacros, value: assert}",
"{key: misc-assert-side-effect.CheckFunctionCalls, value: \"0\"}",
"{key: misc-dangling-handle.HandleClasses, value: \"std::basic_string_view;std::experimental::basic_string_view\"}",
"{key: misc-definitions-in-headers.HeaderFileExtensions, value: \",h,hh,hpp,hxx\"}",
"{key: misc-definitions-in-headers.UseHeaderFileExtension, value: \"1\"}",
"{key: misc-misplaced-widening-cast.CheckImplicitCasts, value: \"1\"}",
"{key: misc-move-constructor-init.IncludeStyle, value: llvm}",
"{key: misc-move-constructor-init.UseCERTSemantics, value: \"0\"}",
"{key: misc-sizeof-expression.WarnOnSizeOfCompareToConstant, value: \"1\"}",
"{key: misc-sizeof-expression.WarnOnSizeOfConstant, value: \"1\"}",
"{key: misc-sizeof-expression.WarnOnSizeOfThis, value: \"1\"}",
"{key: misc-string-constructor.LargeLengthThreshold, value: \"8388608\"}",
"{key: misc-string-constructor.WarnOnLargeLength, value: \"1\"}",
"{key: misc-suspicious-missing-comma.MaxConcatenatedTokens, value: \"5\"}",
"{key: misc-suspicious-missing-comma.RatioThreshold, value: \"0.200000\"}",
"{key: misc-suspicious-missing-comma.SizeThreshold, value: \"5\"}",
"{key: misc-suspicious-string-compare.StringCompareLikeFunctions, value: \"\"}",
"{key: misc-suspicious-string-compare.WarnOnImplicitComparison, value: \"1\"}",
"{key: misc-suspicious-string-compare.WarnOnLogicalNotComparison, value: \"0\"}",
"{key: misc-throw-by-value-catch-by-reference.CheckThrowTemporaries, value: \"1\"}",
"{key: modernize-loop-convert.MaxCopySize, value: \"16\"}",
"{key: modernize-loop-convert.MinConfidence, value: reasonable}",
"{key: modernize-loop-convert.NamingStyle, value: CamelCase}",
"{key: modernize-pass-by-value.IncludeStyle, value: llvm}",
"{key: modernize-replace-auto-ptr.IncludeStyle, value: llvm}",
"{key: modernize-use-nullptr.NullMacros, value: \"NULL\"}",
"{key: performance-faster-string-find.StringLikeClasses, value: \"std::basic_string\"}",
"{key: performance-for-range-copy.WarnOnAllAutoCopies, value: \"0\"}",
"{key: readability-braces-around-statements.ShortStatementLines, value: \"1\"}",
"{key: readability-function-size.BranchThreshold, value: \"4294967295\"}",
"{key: readability-function-size.LineThreshold, value: \"4294967295\"}",
"{key: readability-function-size.StatementThreshold, value: \"800\"}",
"{key: readability-identifier-naming.AbstractClassCase, value: CamelCase}",
"{key: readability-identifier-naming.AbstractClassPrefix, value: \"\"}",
"{key: readability-identifier-naming.AbstractClassSuffix, value: \"\"}",
"{key: readability-identifier-naming.ClassCase, value: CamelCase}",
"{key: readability-identifier-naming.ClassConstantCase, value: CamelCase}",
"{key: readability-identifier-naming.ClassConstantPrefix, value: \"\"}",
"{key: readability-identifier-naming.ClassConstantSuffix, value: \"\"}",
"{key: readability-identifier-naming.ClassMemberCase, value: camelBack}",
"{key: readability-identifier-naming.ClassMemberPrefix, value: \"\"}",
"{key: readability-identifier-naming.ClassMemberSuffix, value: \"\"}",
"{key: readability-identifier-naming.ClassMethodCase, value: camelBack}",
"{key: readability-identifier-naming.ClassMethodPrefix, value: \"\"}",
"{key: readability-identifier-naming.ClassMethodSuffix, value: \"\"}",
"{key: readability-identifier-naming.ClassPrefix, value: \"\"}",
"{key: readability-identifier-naming.ClassSuffix, value: \"\"}",
"{key: readability-identifier-naming.ConstantCase, value: CamelCase}",
"{key: readability-identifier-naming.ConstantMemberCase, value: CamelCase}",
"{key: readability-identifier-naming.ConstantMemberPrefix, value: \"\"}",
"{key: readability-identifier-naming.ConstantMemberSuffix, value: \"\"}",
"{key: readability-identifier-naming.ConstantParameterCase, value: camelBack}",
"{key: readability-identifier-naming.ConstantParameterPrefix, value: \"\"}",
"{key: readability-identifier-naming.ConstantParameterSuffix, value: \"\"}",
"{key: readability-identifier-naming.ConstantPrefix, value: \"\"}",
"{key: readability-identifier-naming.ConstantSuffix, value: \"\"}",
"{key: readability-identifier-naming.ConstexprFunctionCase, value: camelBack}",
"{key: readability-identifier-naming.ConstexprFunctionPrefix, value: \"\"}",
"{key: readability-identifier-naming.ConstexprFunctionSuffix, value: \"\"}",
"{key: readability-identifier-naming.ConstexprMethodCase, value: camelBack}",
"{key: readability-identifier-naming.ConstexprMethodPrefix, value: \"\"}",
"{key: readability-identifier-naming.ConstexprMethodSuffix, value: \"\"}",
"{key: readability-identifier-naming.ConstexprVariableCase, value: camelBack}",
"{key: readability-identifier-naming.ConstexprVariablePrefix, value: \"\"}",
"{key: readability-identifier-naming.ConstexprVariableSuffix, value: \"\"}",
"{key: readability-identifier-naming.EnumCase, value: CamelCase}",
"{key: readability-identifier-naming.EnumConstantCase, value: camelBack}",
"{key: readability-identifier-naming.EnumConstantPrefix, value: \"\"}",
"{key: readability-identifier-naming.EnumConstantSuffix, value: \"\"}",
"{key: readability-identifier-naming.EnumPrefix, value: \"\"}",
"{key: readability-identifier-naming.EnumSuffix, value: \"\"}",
"{key: readability-identifier-naming.FunctionCase, value: camelBack}",
"{key: readability-identifier-naming.FunctionPrefix, value: \"\"}",
"{key: readability-identifier-naming.FunctionSuffix, value: \"\"}",
"{key: readability-identifier-naming.GlobalConstantCase, value: CamelCase}",
"{key: readability-identifier-naming.GlobalConstantPrefix, value: \"\"}",
"{key: readability-identifier-naming.GlobalConstantSuffix, value: \"\"}",
"{key: readability-identifier-naming.GlobalFunctionCase, value: camelBack}",
"{key: readability-identifier-naming.GlobalFunctionPrefix, value: \"\"}",
"{key: readability-identifier-naming.GlobalFunctionSuffix, value: \"\"}",
"{key: readability-identifier-naming.GlobalVariableCase, value: CamelCase}",
"{key: readability-identifier-naming.GlobalVariablePrefix, value: \"\"}",
"{key: readability-identifier-naming.GlobalVariableSuffix, value: \"\"}",
"{key: readability-identifier-naming.IgnoreFailedSplit, value: \"0\"}",
"{key: readability-identifier-naming.InlineNamespaceCase, value: lower_case}",
"{key: readability-identifier-naming.InlineNamespacePrefix, value: \"\"}",
"{key: readability-identifier-naming.InlineNamespaceSuffix, value: \"\"}",
"{key: readability-identifier-naming.LocalConstantCase, value: camelBack}",
"{key: readability-identifier-naming.LocalConstantPrefix, value: \"\"}",
"{key: readability-identifier-naming.LocalConstantSuffix, value: \"\"}",
"{key: readability-identifier-naming.LocalVariableCase, value: camelBack}",
"{key: readability-identifier-naming.LocalVariablePrefix, value: \"\"}",
"{key: readability-identifier-naming.LocalVariableSuffix, value: \"\"}",
"{key: readability-identifier-naming.MemberCase, value: camelBack}",
"{key: readability-identifier-naming.MemberPrefix, value: \"\"}",
"{key: readability-identifier-naming.MemberSuffix, value: \"\"}",
"{key: readability-identifier-naming.MethodCase, value: camelBack}",
"{key: readability-identifier-naming.MethodPrefix, value: \"\"}",
"{key: readability-identifier-naming.MethodSuffix, value: \"\"}",
"{key: readability-identifier-naming.NamespaceCase, value: lower_case}",
"{key: readability-identifier-naming.NamespacePrefix, value: \"\"}",
"{key: readability-identifier-naming.NamespaceSuffix, value: \"\"}",
"{key: readability-identifier-naming.ParameterCase, value: camelBack}",
"{key: readability-identifier-naming.ParameterPackCase, value: camelBack}",
"{key: readability-identifier-naming.ParameterPackPrefix, value: \"\"}",
"{key: readability-identifier-naming.ParameterPackSuffix, value: \"\"}",
"{key: readability-identifier-naming.ParameterPrefix, value: \"\"}",
"{key: readability-identifier-naming.ParameterSuffix, value: \"\"}",
"{key: readability-identifier-naming.PrivateMemberCase, value: camelBack}",
"{key: readability-identifier-naming.PrivateMemberPrefix, value: \"\"}",
"{key: readability-identifier-naming.PrivateMemberSuffix, value: \"_\"}",
"{key: readability-identifier-naming.PrivateMethodCase, value: camelBack}",
"{key: readability-identifier-naming.PrivateMethodPrefix, value: \"\"}",
"{key: readability-identifier-naming.PrivateMethodSuffix, value: \"\"}",
"{key: readability-identifier-naming.ProtectedMemberCase, value: camelBack}",
"{key: readability-identifier-naming.ProtectedMemberPrefix, value: \"\"}",
"{key: readability-identifier-naming.ProtectedMemberSuffix, value: \"\"}",
"{key: readability-identifier-naming.ProtectedMethodCase, value: camelBack}",
"{key: readability-identifier-naming.ProtectedMethodPrefix, value: \"\"}",
"{key: readability-identifier-naming.ProtectedMethodSuffix, value: \"\"}",
"{key: readability-identifier-naming.PublicMemberCase, value: camelBack}",
"{key: readability-identifier-naming.PublicMemberPrefix, value: \"\"}",
"{key: readability-identifier-naming.PublicMemberSuffix, value: \"\"}",
"{key: readability-identifier-naming.PublicMethodCase, value: camelBack}",
"{key: readability-identifier-naming.PublicMethodPrefix, value: \"\"}",
"{key: readability-identifier-naming.PublicMethodSuffix, value: \"\"}",
"{key: readability-identifier-naming.StaticConstantCase, value: CamelCase}",
"{key: readability-identifier-naming.StaticConstantPrefix, value: \"\"}",
"{key: readability-identifier-naming.StaticConstantSuffix, value: \"\"}",
"{key: readability-identifier-naming.StaticVariableCase, value: camelBack}",
"{key: readability-identifier-naming.StaticVariablePrefix, value: \"\"}",
"{key: readability-identifier-naming.StaticVariableSuffix, value: \"\"}",
"{key: readability-identifier-naming.StructCase, value: CamelCase}",
"{key: readability-identifier-naming.StructPrefix, value: \"\"}",
"{key: readability-identifier-naming.StructSuffix, value: \"\"}",
"{key: readability-identifier-naming.TemplateParameterCase, value: CamelCase}",
"{key: readability-identifier-naming.TemplateParameterPrefix, value: \"\"}",
"{key: readability-identifier-naming.TemplateParameterSuffix, value: \"\"}",
"{key: readability-identifier-naming.TemplateTemplateParameterCase, value: CamelCase}",
"{key: readability-identifier-naming.TemplateTemplateParameterPrefix, value: \"\"}",
"{key: readability-identifier-naming.TemplateTemplateParameterSuffix, value: \"\"}",
"{key: readability-identifier-naming.TypeTemplateParameterCase, value: CamelCase}",
"{key: readability-identifier-naming.TypeTemplateParameterPrefix, value: \"\"}",
"{key: readability-identifier-naming.TypeTemplateParameterSuffix, value: \"\"}",
"{key: readability-identifier-naming.TypedefCase, value: CamelCase}",
"{key: readability-identifier-naming.TypedefPrefix, value: \"\"}",
"{key: readability-identifier-naming.TypedefSuffix, value: \"\"}",
"{key: readability-identifier-naming.UnionCase, value: CamelCase}",
"{key: readability-identifier-naming.UnionPrefix, value: \"\"}",
"{key: readability-identifier-naming.UnionSuffix, value: \"\"}",
"{key: readability-identifier-naming.ValueTemplateParameterCase, value: CamelCase}",
"{key: readability-identifier-naming.ValueTemplateParameterPrefix, value: \"\"}",
"{key: readability-identifier-naming.ValueTemplateParameterSuffix, value: \"\"}",
"{key: readability-identifier-naming.VariableCase, value: camelBack}",
"{key: readability-identifier-naming.VariablePrefix, value: \"\"}",
"{key: readability-identifier-naming.VariableSuffix, value: \"\"}",
"{key: readability-identifier-naming.VirtualMethodCase, value: camelBack}",
"{key: readability-identifier-naming.VirtualMethodPrefix, value: \"\"}",
"{key: readability-identifier-naming.VirtualMethodSuffix, value: \"\"}",
"{key: readability-simplify-boolean-expr.ChainedConditionalAssignment, value: \"0\"}",
"{key: readability-simplify-boolean-expr.ChainedConditionalReturn, value: \"0\"}"]

[iwyu]
# iwyu (include what you use) binary
# binary = "iwyu"
# extra flags to pass on to the iwyu command. For example: ["-Xiwyu", "--verbose=3"]
# flags = []
# gives iwyu one or more mapping file
# mapping_files = []
# the global mapping files as provided by the tool installation
# default_mapping_files = []

